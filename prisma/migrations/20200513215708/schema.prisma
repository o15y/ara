generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  provider = "mysql"
  url = "***"
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  UNKNOWN
}

enum NotificationEmails {
  ACCOUNT
  UPDATES
  PROMOTIONS
}

enum PrefersColorScheme {
  NO_PREFERENCE
  LIGHT
  DARK
}

enum PrefersReducedMotion {
  NO_PREFERENCE
  REDUCE
}

enum UserRole {
  SUDO
  USER
}

enum MembershipRole {
  OWNER
  ADMIN
  RESELLER
  MEMBER
}

enum MeetingType {
  IN_PERSON
  PHONE_CALL
  VIDEO_CALL
}

enum EmailStatus {
  PENDING
  SUCCESS
  ERROR
}

enum EmailType {
  INCOMING
  OUTGOING
}

model users {
  checkLocationOnLogin Boolean              @default(false)
  countryCode          String               @default("us")
  createdAt            DateTime             @default(now())
  gender               Gender               @default(UNKNOWN)
  id                   Int                  @default(autoincrement()) @id
  name                 String
  nickname             String
  notificationEmails   NotificationEmails   @default(ACCOUNT)
  password             String?
  prefersLanguage      String               @default("en-us")
  prefersColorScheme   PrefersColorScheme   @default(NO_PREFERENCE)
  prefersReducedMotion PrefersReducedMotion @default(NO_PREFERENCE)
  primaryEmail         Int?
  profilePicture       String               @default("https://unavatar.now.sh/fallback.png")
  role                 UserRole             @default(USER)
  timezone             String               @default("America/Los_Angeles")
  twoFactorEnabled     Boolean              @default(false)
  twoFactorSecret      String?
  updatedAt            DateTime             @updatedAt
  username             String               @unique
  googleAccessToken    String?
  googleRefreshToken   String?
  emails               emails[]             @relation("userEmails")
  incoming_emails      incoming_emails[]    @relation("userIncomingEmails")
  meetings             meetings[]           @relation("userMeetings")
  access_tokens        access_tokens[]      @relation("userAccessTokens")
  approved_locations   approved_locations[] @relation("userApprovedLocations")
  backup_codes         backup_codes[]       @relation("userBackupCodes")
  identities           identities[]         @relation("userIdentities")
  memberships          memberships[]        @relation("userMemberships")
  sessions             sessions[]           @relation("userSessions")
}

model organizations {
  autoJoinDomain      Boolean           @default(false)
  createdAt           DateTime          @default(now())
  forceTwoFactor      Boolean           @default(false)
  id                  Int               @default(autoincrement()) @id
  ipRestrictions      String?
  name                String
  onlyAllowDomain     Boolean           @default(false)
  profilePicture      String            @default("https://unavatar.now.sh/fallback.png")
  stripeCustomerId    String?
  updatedAt           DateTime          @updatedAt
  username            String            @unique
  api_keys            api_keys[]        @relation("organizationApiKeys")
  domains             domains[]         @relation("organizationDomains")
  memberships         memberships[]     @relation("organizationMemberships")
  incoming_emails     incoming_emails[] @relation("organizationIncomingEmails")
  meetings            meetings[]        @relation("organizationMeetings")
  locations           locations[]       @relation("organizationLocations")
  webhooks            webhooks[]        @relation("organizationWebhooks")
  assistantName       String            @default("Ara Isaacson (AI)")
  assistantSignature  String            @default("Best,\n\n{{assistant_name}}")
  schedulingDays      String            @default("1,2,3,4,5")
  schedulingTimeStart String            @default("09:00:00")
  schedulingTimeEnd   String            @default("05:00:00")
  schedulingPadding   Int               @default(15)
  schedulingDuration  Int               @default(30)
  schedulingType      MeetingType       @default(VIDEO_CALL)
  schedulingLocation  Int               @default(0)
  calendars           String?
  customEmailEnabled  Boolean           @default(false)
  customEmailAddress  String?
  customEmailHost     String?
  customEmailPort     Int?
  customEmailSecure   Boolean           @default(false)
  customEmailUsername String?
  customEmailPassword String?
}

model locations {
  id             Int               @default(autoincrement()) @id
  type           MeetingType
  data           String?
  value          String
  meetings       meetings[]        @relation("meetingLocation")
  organization   organizations     @relation("organizationLocations", fields: [organizationId], references: [id])
  organizationId Int
}

model meetings {
  id             Int               @default(autoincrement()) @id
  proposedTimes  String?
  confirmedTime  String?
  duration       Int
  meetingType    MeetingType       @default(VIDEO_CALL)
  guests         String            @default("[]")
  location       locations         @relation("meetingLocation", fields: [locationId], references: [id])
  locationId     Int
  user           users             @relation("userMeetings", fields: [userId], references: [id])
  userId         Int
  organization   organizations     @relation("organizationMeetings", fields: [organizationId], references: [id])
  organizationId Int
  emails         incoming_emails[] @relation("meetingIncomingEmails")
}

model incoming_emails {
  id             Int           @default(autoincrement()) @id
  objectId       String        @unique
  logs           String?
  emailType      EmailType     @default(INCOMING)
  from           String
  to             String
  cc             String
  subject        String
  status         EmailStatus   @default(PENDING)
  emailDate      DateTime
  messageId      String
  inReplyTo      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           users         @relation("userIncomingEmails", fields: [userId], references: [id])
  userId         Int
  organization   organizations @relation("organizationIncomingEmails", fields: [organizationId], references: [id])
  organizationId Int
  meeting        meetings      @relation("meetingIncomingEmails", fields: [meetingId], references: [id])
  meetingId      Int

  @@index([userId], name: "userId")
  @@index([organizationId], name: "organizationId")
  @@index([meetingId], name: "meetingId")
  @@map("incoming-emails")
}

model emails {
  createdAt  DateTime @default(now())
  email      String
  id         Int      @default(autoincrement()) @id
  isVerified Boolean  @default(false)
  updatedAt  DateTime @updatedAt
  user       users    @relation("userEmails", fields: [userId], references: [id])
  userId     Int

  @@index([userId], name: "userId")
}

model access_tokens {
  createdAt      DateTime @default(now())
  description    String?
  expiresAt      DateTime
  id             Int      @default(autoincrement()) @id
  jwtAccessToken String
  name           String?
  scopes         String?
  updatedAt      DateTime @updatedAt
  user           users    @relation("userAccessTokens", fields: [userId], references: [id])
  userId         Int

  @@index([userId], name: "userId")
  @@map("access-tokens")
}

model api_keys {
  createdAt            DateTime      @default(now())
  description          String?
  expiresAt            DateTime
  id                   Int           @default(autoincrement()) @id
  ipRestrictions       String?
  jwtApiKey            String
  name                 String?
  organization         organizations @relation("organizationApiKeys", fields: [organizationId], references: [id])
  organizationId       Int
  referrerRestrictions String?
  scopes               String?
  updatedAt            DateTime      @updatedAt

  @@map("api-keys")
}

model approved_locations {
  createdAt DateTime @default(now())
  id        Int      @default(autoincrement()) @id
  subnet    String
  user      users    @relation("userApprovedLocations", fields: [userId], references: [id])
  userId    Int

  @@map("approved-locations")
}

model backup_codes {
  id        Int      @default(autoincrement()) @id
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isUsed    Boolean  @default(false)
  user      users    @relation("userBackupCodes", fields: [userId], references: [id])
  userId    Int

  @@index([userId], name: "userId")
  @@map("backup-codes")
}

model coupon_codes {
  id               Int       @default(autoincrement()) @id
  code             String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  expiresAt        DateTime?
  maxUses          Int       @default(1000)
  usedCount        Int       @default(0)
  teamRestrictions String?
  amount           Int
  currency         String
  description      String?

  @@map("coupon-codes")
}

model domains {
  createdAt        DateTime      @default(now())
  domain           String
  id               Int           @default(autoincrement()) @id
  isVerified       Boolean       @default(false)
  organization     organizations @relation("organizationDomains", fields: [organizationId], references: [id])
  organizationId   Int
  updatedAt        DateTime      @updatedAt
  verificationCode String

  @@index([organizationId], name: "organizationId")
}

model identities {
  createdAt  DateTime @default(now())
  id         Int      @default(autoincrement()) @id
  identityId String
  loginName  String
  type       String
  updatedAt  DateTime @updatedAt
  user       users    @relation("userIdentities", fields: [userId], references: [id])
  userId     Int

  @@index([userId], name: "userId")
}

model memberships {
  createdAt      DateTime       @default(now())
  id             Int            @default(autoincrement()) @id
  organization   organizations  @relation("organizationMemberships", fields: [organizationId], references: [id])
  organizationId Int
  role           MembershipRole @default(MEMBER)
  updatedAt      DateTime       @updatedAt
  user           users          @relation("userMemberships", fields: [userId], references: [id])
  userId         Int

  @@index([organizationId], name: "organizationId")
  @@index([userId], name: "userId")
}

model sessions {
  createdAt   DateTime @default(now())
  id          Int      @default(autoincrement()) @id
  ipAddress   String
  jwtToken    String
  updatedAt   DateTime @updatedAt
  userAgent   String
  city        String?
  region      String?
  timezone    String?
  countryCode String?
  user        users    @relation("userSessions", fields: [userId], references: [id])
  userId      Int

  @@index([userId], name: "userId")
}

model webhooks {
  contentType    String        @default("application/json")
  createdAt      DateTime      @default(now())
  event          String
  id             Int           @default(autoincrement()) @id
  isActive       Boolean       @default(false)
  lastFiredAt    DateTime?
  organization   organizations @relation("organizationWebhooks", fields: [organizationId], references: [id])
  organizationId Int
  secret         String?
  updatedAt      DateTime      @updatedAt
  url            String

  @@index([organizationId], name: "organizationId")
}